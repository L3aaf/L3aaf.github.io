[{"content":" 📌 本文介绍如何在 Linux 系统下配置 STM32 开发环境，包括必要的工具安装、驱动配置、调试支持等。\n📚 目录 开发环境概述 安装 STM32CubeMX 安装CLion 安装各种工具链 （STM32CubeCLT） 创建第一个工程 常见问题与解决方案 开发环境概述 测试环境为：\n操作系统：Ubuntu 20.04 LTS MCU型号：STM32F103C8T6 开发工具：STM32CubeMX、CLion、STM32CubeCLT 调试接口：ST-Link v2 这套组合是 Linux 下开发 STM32 的主流方案，具备完全开源、可定制的特点。\n安装 STM32CubeMX 我在搜索教程时看到有人提到过因为CubeMX是依赖于JAVA环境的，在安装CubeMX之前需要安装JDK，我之前因为一些原因已经安装过了，这里不再赘述我的安装过程，如果遇到问题请自行排查。\nSTM32CubeMX 是 ST 官方提供的图形化初始化配置工具，可帮助生成 HAL 库工程框架。\n前往 ST 官方网站注册并下载：STM32CubeMX 下载地址 点击获取软件按钮并选择Linux最新版本： 下载完成后提取到自己想存放的位置，我这里是在home目录下创建了一个Iot文件夹，提取完成后进入文件夹能看见两个文件和一个文件夹： 其中Readme.html为官方用户手册，大致介绍的是ST官方的工具以及各个操作系统的CubeMX安装和卸载步骤的，有兴趣可以自行查看。 这里继续Linux下CubeMX安装步骤 赋予安装文件可执行权限：chmod +x SetupSTM32CubeMX-6.14.1。 在当前目录下打开命令行中运行：./SetupSTM32CubeMX-6.14.1 剩下的步骤跟Windows下安装就是一样的了，同意条款，选定安装位置等，此处不再赘述。 安装完成 安装 CLion 在Windows环境下只使用过Keil 5作为开发工具，前段时间刷到B站UP主：keysking的 CLion配置STM32开发环境视频:爽！手把手教你用CLion开发STM32【大人，时代变啦！！！】， 所以在Linux的嵌入式开发过程中也尝试一下，JetBrains家的IDE还是很好用的。\n在Jetbrains的官网找到CLion的下载链接：CLION，点击Download，选择Linux的版本。 下载到自己记得住的地方然后解压，进入文件夹~/CLion/bin目录下，运行CLion：./clion\n到这里就算是安装完成了，但是没有图标启动很不方便，所以下面我们为CLion创建一个图标。 步骤 1：创建 .desktop 文件 在终端中执行以下命令创建文件： 1 nano ~/.local/share/applications/clion.desktop 步骤 2：填入以下内容 将以下内容复制粘贴进去（请根据你的实际安装路径修改）： 1 2 3 4 5 6 7 8 9 10 [Desktop Entry] Version=1.0 Type=Application Name=CLion Icon=/home/yourusername/apps/clion-2025.1/bin/clion.svg Exec=/home/yourusername/apps/clion-2025.1/bin/clion.sh Comment=JetBrains CLion IDE Categories=Development;IDE; Terminal=false StartupNotify=true 请注意：\n替换 /home/yourusername/apps/clion-2025.1/ 为你自己的实际路径。 CLion 图标通常位于 bin/clion.svg，如不存在可以下载或使用其它图标。 这样就能在你的应用程序里找到CLion了， 当然，你想跟Windows一样在桌面存放就将这个.desktop文件copy一份到你系统桌面的文件夹并且在桌面对着这个文件右键允许启动就OK了。 安装各种工具链 （STM32CubeCLT） 在CubeMX的右下角有External Tools选项，在里面找到STM32CubeCLT点击，跳转到官网进行下载。 下载并解压，在解压的文件夹下打开终端并输入：\n1 2 chmod 777 st-stm32cubeclt_xx_amd64.sh ./st-stm32cubeclt_xx_amd64.sh 给安装程序最高权限,XX为你对应的版本号文件名，最好将命令行全屏，不然很容易按过头\n安装一直Y同意就行了，然后是安装路径：[/home/xx/st/stm32cubeclt_1.18.0] 最后出现：STM32CubeCLT installed successfully就是安装成功了，路径就是刚刚设置的路径。 安装完成后插上STLink V2（不用插开发板），在CLT文件目录下运行STLinkUpgrade.sh文件对你的STLink进行升级。\n安装完成后最好重启一下电脑，我在安装完成后CLion死活找不到arm-none-eabi-gcc等环境， 排查了半天发现重启电脑就好了（PS:记得将STM32CubeCLT下的工具链写进环境变量文件/.bashrc里）。\n创建第一个工程 打开CLion，CLion现在对非商业全免费，选择非商业许可证使用即可。\n选择新建项目 选择STM32CubeMX并且配置好STM32CubeMX路径 点击启动STM32CubeMX，并且新建一个项目，我这里使用STM32F103C8T6进行测试 配置调试接口为SW，并且将PC13设置为GPIO_Output模式 进入工程配置 填入工程路径 在工具链中配置好GCC和NinJa 选择刚配置好的工具链并勾选上重新加载cmake文件 在高级设置中找到启用调试服务器选项 在右上角选择编辑调试服务器，配置好STLink的调试器就可以愉快的写代码啦！ 记得关掉持久会话，这样烧录后就不用手动复位了。 点灯！\n点击右上角小三角进行烧录，在左下角服务中可以看到烧录信息。 点灯成功！ ","date":"2025-06-13T10:00:00+08:00","permalink":"https://dq-blog.xyz/p/stm32%E5%9C%A8linux%E4%B8%8B%E7%9A%84%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","title":"STM32在Linux下的环境搭建"},{"content":"欢迎来到我的测试博客文章！\n这是在 Hugo 框架下，使用 Stack 主题发布的第一篇文章。主要用于测试基本的排版、代码块、高亮、图片、列表和表格等 Markdown 功能是否正常显示。\n🌟 标题样式 三级标题 正文段落内容。\n📋 列表 项目一 项目二 子项 A 子项 B 有序项一 有序项二 💻 代码块示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, Hugo Stack!\u0026#34;) } \u0026lt;style\u0026gt; .highlight { /* 你可以根据需要调整这个高度 */ max-height: 400px; overflow: hidden; } .code-show { max-height: none !important; } .code-more-box { width: 100%; padding-top: 78px; background-image: -webkit-gradient(linear, left top, left bottom, from(rgba(255, 255, 255, 0)), to(#fff)); position: absolute; left: 0; right: 0; bottom: 0; z-index: 1; } .code-more-btn { display: block; margin: auto; width: 44px; height: 22px; background: #f0f0f5; border-top-left-radius: 8px; border-top-right-radius: 8px; padding-top: 6px; cursor: pointer; } .code-more-img { cursor: pointer !important; display: block; margin: auto; width: 22px; height: 16px; } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; function initCodeMoreBox() { let codeBlocks = document.querySelectorAll(\u0026#34;.highlight\u0026#34;); if (!codeBlocks) { return; } codeBlocks.forEach(codeBlock =\u0026gt; { // 校验是否overflow if (codeBlock.scrollHeight \u0026lt;= codeBlock.clientHeight) { return; } // 元素初始化 // codeMoreBox let codeMoreBox = document.createElement(\u0026#39;div\u0026#39;); codeMoreBox.classList.add(\u0026#39;code-more-box\u0026#39;); // codeMoreBtn let codeMoreBtn = document.createElement(\u0026#39;span\u0026#39;); codeMoreBtn.classList.add(\u0026#39;code-more-btn\u0026#39;); codeMoreBtn.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { codeBlock.classList.add(\u0026#39;code-show\u0026#39;); codeMoreBox.style.display = \u0026#39;none\u0026#39;; // 触发resize事件，重新计算目录位置 window.dispatchEvent(new Event(\u0026#39;resize\u0026#39;)) }) // img let img = document.createElement(\u0026#39;img\u0026#39;); img.classList.add(\u0026#39;code-more-img\u0026#39;); img.src = {{ (resources.Get \u0026#34;icons/codeMore.png\u0026#34;).Permalink }} // 元素添加 codeMoreBtn.appendChild(img); codeMoreBox.appendChild(codeMoreBtn); codeBlock.appendChild(codeMoreBox) }) } initCodeMoreBox(); \u0026lt;/script\u0026gt; 🔠 文本格式 加粗文本\n斜体文本\n行内代码\n这是一个Note引用块。\n这是一个Error引用块。\n这是一个WARN引用块。\n这是一个TIP引用块。\n","date":"2025-06-12T10:00:00+08:00","permalink":"https://dq-blog.xyz/p/%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/","title":"测试博客文章"}]