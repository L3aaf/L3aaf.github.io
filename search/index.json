[{"content":" 📌 TIP\n本文介绍如何在 Linux 系统下配置 STM32 开发环境，包括必要的工具安装、驱动配置、调试支持等。\n📚 目录 开发环境概述 安装 STM32CubeMX 安装 CLion 安装工具链 STM32CubeCLT 创建第一个工程 开发环境概述 💡 测试环境说明：\n操作系统：Ubuntu 20.04 LTS MCU 型号：STM32F103C8T6 开发工具：STM32CubeMX、CLion、STM32CubeCLT 调试接口：ST-Link v2 这套组合是 Linux 下开发 STM32 的主流方案，具备完全开源、可定制的特点。\n安装 STM32CubeMX ⚠️ 注意：\nSTM32CubeMX 依赖 Java 环境，安装前请确保系统已正确配置 JDK。\nSTM32CubeMX 是 ST 官方提供的图形化初始化配置工具，可生成 HAL 库工程框架。\n前往 ST 官方下载页面，下载最新版 Linux 安装包。 下载后解压到你想存放的位置（例如 ~/Iot/）。 解压后文件结构如下： 📘 Readme.html 是官方用户手册，可供参考。\n授予安装文件执行权限并安装：\n1 2 chmod +x SetupSTM32CubeMX-6.14.1 ./SetupSTM32CubeMX-6.14.1 安装过程与 Windows 类似，按照提示操作即可。\n安装完成后界面如下：\n安装 CLion Windows 下常用 Keil 开发 STM32，本次尝试使用 JetBrains 的 CLion 进行跨平台开发，参考了 B站 UP 主 keysking 的教学视频。\n前往 CLion 官网 下载 Linux 安装包。 解压后进入 ~/CLion/bin 目录，运行：\n1 ./clion 为方便启动，可创建桌面图标：\n1 nano ~/.local/share/applications/clion.desktop 粘贴以下内容（路径请根据实际修改）：\n1 2 3 4 5 6 7 8 9 10 [Desktop Entry] Version=1.0 Type=Application Name=CLion Icon=/home/yourusername/apps/clion-2025.1/bin/clion.svg Exec=/home/yourusername/apps/clion-2025.1/bin/clion.sh Comment=JetBrains CLion IDE Categories=Development;IDE; Terminal=false StartupNotify=true ⚠️ 替换路径为实际安装路径，可将 .desktop 文件复制到桌面以便图形化启动。\n安装工具链 STM32CubeCLT 在 STM32CubeMX 右下角点击 External Tools，进入 ST 官网下载 STM32CubeCLT。 下载并解压后，在终端执行：\n1 2 chmod 777 st-stm32cubeclt_xx_amd64.sh ./st-stm32cubeclt_xx_amd64.sh ⚠️ xx 为具体版本号，例如 1.18.0，建议全屏运行安装程序避免错过条款提示。\n安装过程中全程按 Y 同意协议，设置安装路径（如 /home/xx/st/stm32cubeclt_1.18.0）。\n安装成功提示：\n1 STM32CubeCLT installed successfully 插入 ST-Link V2（不接开发板），运行 CLT 目录下的 STLinkUpgrade.sh 升级调试器固件。\n添加环境变量：\n1 2 echo \u0026#39;export PATH=$PATH:/home/xx/st/stm32cubeclt_1.18.0/bin\u0026#39; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc ❗ 安装完成建议重启系统，否则 CLion 可能找不到 arm-none-eabi-gcc 等工具。\n创建第一个工程 启动 CLion，选择非商业许可证。\n选择新建 STM32 项目：\n配置 STM32CubeMX 路径： 启动 CubeMX，新建项目，选择芯片（如 STM32F103C8T6）： 配置调试接口（SW），设置 PC13 为 GPIO_Output： 设置工程路径： 配置工具链，使用 GCC 和 Ninja： 勾选 Reload CMake Project，确保路径生效： 启用调试服务器： 配置 ST-Link： 关闭持久会话以支持自动复位： 烧录测试（点灯）：\n点击右上角运行，左下角查看烧录日志：\n点灯成功 🎉： ","date":"2025-06-13T10:00:00+08:00","permalink":"https://dq-blog.xyz/p/stm32%E5%9C%A8linux%E4%B8%8B%E7%9A%84%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","title":"STM32在Linux下的环境搭建"},{"content":"欢迎来到我的测试博客文章！\n这是在 Hugo 框架下，使用 Stack 主题发布的第一篇文章。主要用于测试基本的排版、代码块、高亮、图片、列表和表格等 Markdown 功能是否正常显示。\n🌟 标题样式 三级标题 正文段落内容。\n📋 列表 项目一 项目二 子项 A 子项 B 有序项一 有序项二 💻 代码块示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, Hugo Stack!\u0026#34;) } \u0026lt;style\u0026gt; .highlight { /* 你可以根据需要调整这个高度 */ max-height: 400px; overflow: hidden; } .code-show { max-height: none !important; } .code-more-box { width: 100%; padding-top: 78px; background-image: -webkit-gradient(linear, left top, left bottom, from(rgba(255, 255, 255, 0)), to(#fff)); position: absolute; left: 0; right: 0; bottom: 0; z-index: 1; } .code-more-btn { display: block; margin: auto; width: 44px; height: 22px; background: #f0f0f5; border-top-left-radius: 8px; border-top-right-radius: 8px; padding-top: 6px; cursor: pointer; } .code-more-img { cursor: pointer !important; display: block; margin: auto; width: 22px; height: 16px; } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; function initCodeMoreBox() { let codeBlocks = document.querySelectorAll(\u0026#34;.highlight\u0026#34;); if (!codeBlocks) { return; } codeBlocks.forEach(codeBlock =\u0026gt; { // 校验是否overflow if (codeBlock.scrollHeight \u0026lt;= codeBlock.clientHeight) { return; } // 元素初始化 // codeMoreBox let codeMoreBox = document.createElement(\u0026#39;div\u0026#39;); codeMoreBox.classList.add(\u0026#39;code-more-box\u0026#39;); // codeMoreBtn let codeMoreBtn = document.createElement(\u0026#39;span\u0026#39;); codeMoreBtn.classList.add(\u0026#39;code-more-btn\u0026#39;); codeMoreBtn.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { codeBlock.classList.add(\u0026#39;code-show\u0026#39;); codeMoreBox.style.display = \u0026#39;none\u0026#39;; // 触发resize事件，重新计算目录位置 window.dispatchEvent(new Event(\u0026#39;resize\u0026#39;)) }) // img let img = document.createElement(\u0026#39;img\u0026#39;); img.classList.add(\u0026#39;code-more-img\u0026#39;); img.src = {{ (resources.Get \u0026#34;icons/codeMore.png\u0026#34;).Permalink }} // 元素添加 codeMoreBtn.appendChild(img); codeMoreBox.appendChild(codeMoreBtn); codeBlock.appendChild(codeMoreBox) }) } initCodeMoreBox(); \u0026lt;/script\u0026gt; 🔠 文本格式 加粗文本\n斜体文本\n行内代码\n这是一个Note引用块。\n这是一个Error引用块。\n这是一个WARN引用块。\n这是一个TIP引用块。\n","date":"2025-06-12T10:00:00+08:00","permalink":"https://dq-blog.xyz/p/%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/","title":"测试博客文章"}]